<!DOCTYPE html>
<html lang="en" style="height:100%">
  <head>
    <div id="crashHistory" data-test= <%=crashHistory%> type="hidden"></div>
    <%- include('../partials/head') %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="static/style.css" />
    <title>Directions Service</title>
    
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://kit.fontawesome.com/b698efa5cd.js" crossorigin="anonymous"></script>
    <script>    
        let map;
        let markers = [];
        const dummyResult = [
            {'intersection': 'Main Street and Roosevelt Island Bridge',
            'coordinates': [40.764098201088665, -73.94771592778356],
            'CONTRIBUTING FACTOR VEHICLE 1': "[Failure to Yield Right-of-Way]",
            'casualties_count': 16.0},
            {'intersection': 'Vernon Blvd and 36 Ave',
            'coordinates': [40.76201169857319, -73.94247175715915],
            'CONTRIBUTING FACTOR VEHICLE 1': "[Traffic Control Disregarded]",
            'casualties_count': 3.0},
            {'intersection': '40th Ave and Cresent St',
            'coordinates': [40.753490477639915, -73.93797082991887],
            'CONTRIBUTING FACTOR VEHICLE 1': "[Driver Inattention/Distraction]",
            'casualties_count': 31.0},
            {'intersection': 'Cresent St and Queens Plaza N',
            'coordinates': [40.75098898436325, -73.94028233511814],
            'CONTRIBUTING FACTOR VEHICLE 1': "[View Obstructed/Limited]",
            'casualties_count': 22.0},
        ]
                                        
        function initMap() {
            const directionsRenderer = new google.maps.DirectionsRenderer();
            const directionsService = new google.maps.DirectionsService();
            map = new google.maps.Map(document.getElementById("map"), {
                mapId: 'route_map',
                zoom: 10,
                center: { lat: 40.73, lng: -73.94 },
                disableDefaultUI: true,
            });

            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById("sidebar"));

            const control = document.getElementById("floating-panel");

            map.controls[google.maps.ControlPosition.TOP_CENTER].push(control);

            const onChangeHandler = function () {
                clearMarkers(markers);
                calculateAndDisplayRoute(directionsService, directionsRenderer);
            };
            
            searchButton = document.getElementById('searchButton')
            searchButton.addEventListener("click", onChangeHandler);
        }
        
        function clearMarkers(markers){
            for(i=0; i<markers.length; i++){
                markers[i][0].map=null;
            }
        }

        function createMarkers(markers){
            for (let i=0; i<markers.length;i++){
                points = markers[i]
                let advancedMarkerView = points[0]
                let point = points[1]
                const element = advancedMarkerView.element;
                ["focus", "pointerenter"].forEach((event) => {
                    element.addEventListener(event, () => {
                        highlight(advancedMarkerView, point);
                    });
                });
                ["blur", "pointerleave"].forEach((event) => {
                    element.addEventListener(event, () => {
                        unhighlight(advancedMarkerView, point);
                    });
                });
                advancedMarkerView.addListener("click", (event) => {
                    unhighlight(advancedMarkerView, point);
                });
            }
        };

        function calculateAndDisplayRoute(directionsService, directionsRenderer) {
            document.getElementById('loading').style.display = 'block';
            const mode = document.querySelector('input[name="mode"]:checked').value;
            const start = document.getElementById("origin").value;
            const end = document.getElementById("destination").value;
            
            var modeOption = google.maps.TravelMode.DRIVING;

            if (mode == "walking"){
                modeOption = google.maps.TravelMode.WALKING;
            } else if (mode == "bicycling") {
                modeOption = google.maps.TravelMode.BICYCLING;
            } else if (mode == "transit") {
                modeOption = google.maps.TravelMode.TRANSIT;
            }

            var latlngs; // an array of LatLngs that represent an approximate (smoothed) path of the resulting directions.
            let results;

            directionsService
            .route({
                origin: start,
                destination: end,
                travelMode: modeOption,
            }, async function(response, status){
                if(status== "OK"){
                    latlngs = JSON.parse(JSON.stringify(response.routes[0]["overview_path"]));
                    
                    try{
                        if (response.routes && response.routes.length > 0) {
                            latlngs = response.routes[0].overview_path;
                            results = await getDangerFlagByPoint(latlngs);
                            console.log('results array=', results)
                        }
                        // draw the marks on map
                        for (let point of results){
                            const content = buildContent(point);
                            const advancedMarkerView = new google.maps.marker.AdvancedMarkerView({
                                map,
                                content,
                                position: { lat: point.coordinates[1], lng: point.coordinates[0]},
                                title: point.cause
                            });
                            markers.push([advancedMarkerView,point])
                        }
                        createMarkers(markers);
                    }catch(e){
                        console.log(e)
                    }finally{
                        directionsRenderer.setDirections(response);
                        document.getElementById('loading').style.display = 'none';
                    }
                    
                }else{
                    document.getElementById('loading').style.display = 'none';
                    if ((start == "") || (end == "")) {
                        alert("Please enter addresses.");
                    } else {
                        alert("Directions request failed");
                    }
                }
            })
        }      

        function highlight(markerView, property) {
            markerView.content.classList.add("highlight");
            markerView.element.style.zIndex = 1;
        }
          
        function unhighlight(markerView, property) {
            markerView.content.classList.remove("highlight");
            markerView.element.style.zIndex = "";
        }

        function buildContent(point) {
            let dangerousity
            let cause = point['contributing_factor'].slice(1,-1).split(',')[0]

            if (point.casualties_count >= 30){
                dangerousity = 'most-dangerous'
            } else if (point.casualties_count >=20){
                dangerousity = 'very-dangerous'
            } else if (point.casualties_count >=10){
                dangerousity = 'somewhat-dangerous'
            } else {
                dangerousity = 'slightly-dangerous'
            }
            const content = document.createElement("div");
            
            content.classList.add("notification");
            content.innerHTML = `
                <div class="icon">
                    <i aria-hidden="true" class="fa fa-icon fa-duotone fa-car-burst ${dangerousity}"></i>
                </div>
                <div class="details">
                    <div class="intersection">${point.intersection == 'undefined'? '': point.intersection}</div>
                    <div class="dangerousity">${point.casualties_count} Wounded/ Killed</div>
                    <div class="cause">Main Cause: ${cause=='Undefined'?'':cause}</div>
                    <div class="features">
                </div>
              `;
            return content;
        }
        
        async function getDangerFlagByPoint(points){
            let results= [];
            // find nearest point in the crash database and get dangerousity score from that api
            for (let point of points){
                let lat = point.lat();
                    lng = point.lng();

                await fetch(`https://vision-zero-api.herokuapp.com/positionScore/?latitude=${lat}&longitude=${lng}`,{
                    method: 'GET',
                    headers: {
                        'Access-Control-Allow-Origin':'*'
                    }
                })
                .then((response)=> response.json())
                .then((data) => {
                    if(data && data.length >0){
                        results.push(data[0])
                    };
                });
            }
            return results;
        };

        window.initMap = initMap;

    </script>
    <script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyChvBupfwisVPAWC7pJOS-RlKAuWjrLymw&callback=initMap&v=beta&libraries=marker"
    >
        initMap()
    </script>
  </head>

  <body>

    <div id="navigation-app"></div>
    <div id="container">
        <div id="loading">
            <div class="loading-content">
                Fetching the API...  
                <br>
                <i class="fa-solid fa-spinner fa-spin"></i>
            </div>
        </div>
        <div id="map"></div>
        <div class="card" id="search-card">
        <div id="travel-mode">
            <label class="radio">
                <input type="radio" value="walking" name="mode" checked>
                    Walking
            </label>
            <label class="radio">
                <input type="radio" value="bicycling" name="mode" >
                    Bicycling
            </label>
            <label class="radio">
                <input type="radio" value="transit" name="mode" >
                    Transit
            </label>
            <label class="radio">
                <input type="radio" value="driving" name="mode">
                    Driving
            </label>
        </div>
        
        <div id="user-input-area">
            <input id="origin" class="address-input"
                    required type="text" 
                    name="start-point"  
                    placeholder="Origin" 
                    type="text" />
            <div>
                <img src="../../../static/downward_arrow.png" id="downward-arrow"/>
            </div>
            
            <input id="destination"
                required type="text" 
                class="address-input"
                name="destination"  
                placeholder="Destination"
                    type="text"
                    />

            <button class="button is-medium is-success is-outlined"  id="searchButton">
                Go
            </button>
        </div>

        <p id="final-line">
            @ Vision Zero - Crash Data API
        </p>
    </div>
    <div>
       <a href="/"><button id="exit-demo"> Exit Demo</button></a>
    </div>
    
    </body>
  <%- include('../partials/footer') %>
</html>