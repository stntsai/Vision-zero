<!DOCTYPE html>
<html lang="en" style="height:100%"
>
  <head>
    <%- include('../partials/head') %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="static/style.css" />
    <title>Directions Service</title>
    
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <script>    
        var map;    
        function initMap() {
            const directionsRenderer = new google.maps.DirectionsRenderer();
            const directionsService = new google.maps.DirectionsService();
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 10,
                center: { lat: 40.73, lng: -73.94 },
                disableDefaultUI: true,
            });

            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById("sidebar"));

            const control = document.getElementById("floating-panel");

            map.controls[google.maps.ControlPosition.TOP_CENTER].push(control);

            const onChangeHandler = function () {
                calculateAndDisplayRoute(directionsService, directionsRenderer);
            };

            document.getElementById("searchButton").addEventListener("click", onChangeHandler);
        }

        function calculateAndDisplayRoute(directionsService, directionsRenderer) {
            const mode = document.querySelector('input[name="mode"]:checked').value;
            const start = document.getElementById("origin").value;
            const end = document.getElementById("destination").value;
            
            var modeOption = google.maps.TravelMode.DRIVING;

            if (mode == "walking"){
                modeOption = google.maps.TravelMode.WALKING;
            } else if (mode == "bicycling") {
                modeOption = google.maps.TravelMode.BICYCLING;
            } else if (mode == "transit") {
                modeOption = google.maps.TravelMode.TRANSIT;
            }

            // dangerous intersection points for demo
            const contentString =
                '<div id="content">' +
                '<div id="siteNotice">' +
                "</div>" +
                '<h1 id="firstHeading" class="firstHeading">40.763823, -73.969946</h1>' +
                '<div id="bodyContent">' +
                "<p><b>Cause:</b>Drunk</p>" +
                "</div>" +
                "</div>";

            const infowindow = new google.maps.InfoWindow({
                content: contentString,
            });

            const marker = new google.maps.Marker({
                position: { lat: 40.763823, lng: -73.969946 },
                map,
                icon: new google.maps.MarkerImage('static/exclamation.svg',
                                                    null, null, null, new google.maps.Size(20,22)),
                title: "CT to CP",
            });

            marker.addListener("click", () => {
                infowindow.open({
                anchor: marker,
                map,
                shouldFocus: false,
                });
            });

            // pt 2
            const contentString1 =
                '<div id="content">' +
                '<div id="siteNotice">' +
                "</div>" +
                '<h1 id="firstHeading" class="firstHeading">40.747806, -73.968357</h1>' +
                '<div id="bodyContent">' +
                "<p><b>Cause:</b>Speeding</p>" +
                "</div>" +
                "</div>";

            const infowindow1 = new google.maps.InfoWindow({
                content: contentString1,
            });

            const marker1 = new google.maps.Marker({
                position: { lat: 40.747806, lng: -73.968357 },
                map,
                icon: new google.maps.MarkerImage('static/exclamation.svg',
                                                    null, null, null, new google.maps.Size(20,22)),
                title: "CP to WTC",
            });


            marker1.addListener("click", () => {
                infowindow1.open({
                anchor: marker1,
                map,
                shouldFocus: false,
                });
            });

            directionsService
                .route({
                    origin: start,
                    destination: end,
                    travelMode: modeOption,
                })
                .then((response) => {
                    directionsRenderer.setDirections(response);
                })
                .catch((e) => {
                    if ((start == "") || (end == "")) {
                        alert("Please enter addresses.");
                    } else {
                        window.alert("Directions request failed due to " + status);
                    }
                });
        }

        window.initMap = initMap;


    </script>
    <script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyChvBupfwisVPAWC7pJOS-RlKAuWjrLymw&callback=initMap"
    >
        initMap()
    </script>
  </head>

  <body>
    <header>
        <%- include('../partials/nav', { email: user.email }) %>
    </header>

    <div class="control" style="left: 16%;top: 2%; color: #635E5E;">
        <label class="radio">
            <input type="radio" value="driving" name="mode"  style="margin-right: 8px;" checked>
                Driving
        </label>
        <label class="radio">
            <input type="radio" value="bicycling" name="mode" style="margin-right: 8px;">
                Bicycling
        </label>
        <label class="radio">
            <input type="radio" value="transit" name="mode" style="margin-right: 8px;">
                Transit
        </label>
        <label class="radio">
            <input type="radio" value="walking" name="mode" style="margin-right: 8px;">
                Walking
        </label>
    </div>

    <div id="search-box" style="background-color: #DDDDDD; 
                                opacity: 90%;
                                height: 60px;
                                width: 60%;
                                position: relative;
                                top:3%;
                                left:16%;">

        <input id="origin"
                class="input" 
                required type="text" 
                name="start-point"  
                placeholder="Origin" 
                style="background-color: #DDDDDD; 
                        opacity: 90%; 
                        width: 45%; 
                        height: 60px;
                        margin-left: 5px;
                        margin-right: 10px;" 
                type="text">

        <i class="fas fa-arrow-right fas fa-2x" style="padding-top: 15px; 
                                                        color: #7BB6D9;
                                                        margin-left: 10px;"></i>


        <input id="destination"
               class="input" 
               required type="text" 
               name="destination"  
               placeholder="Destination" 
               style="background-color: #DDDDDD; 
                        opacity: 90%; 
                        width: 45%; 
                        height: 60px;
                        margin-left: 20px;
                        position: relative;" 
                type="text">
        <a href="/sign-in" >
        <a id="searchButton" class="button is-light" style="top:-85%; 
                            background-color: #3F8ABE; 
                            color: #FFFFFF; 
                            text-align: center; 
                            position: relative;
                            left: 101%">
            Search
        </a>
    </div>
      <div id="container">
        <div id="map"></div>
        <div id="sidebar"></div>
      </div>

    <!-- 
     The `defer` attribute causes the callback to execute after the full HTML
     document has been parsed. For non-blocking uses, avoiding race conditions,
     and consistent behavior across browsers, consider loading using Promises
     with https://www.npmjs.com/package/@googlemaps/js-api-loader.
    -->

  </body>
  <%- include('../partials/footer') %>
</html>