<!DOCTYPE html>
<html lang="en" style="height:100%"
>
  <head>
    <div id="crashHistory" data-test= <%=crashHistory%> type="hidden"></div>
    <%- include('../partials/head') %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="static/style.css" />
    <title>Directions Service</title>
    
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <script>    
        var map; 

        // Deprecated
        function getNearbyCrashCoordinates(crashHistory, latlngs){
            var window = 0.0007
    
            var routeCoordinates =[]
            var outputCoordinates = []

            
            var crash_history = [];
            var crashHistory_str = crashHistory.split(",");
            for (let i = 0; i < crashHistory_str.length; i += 2) {
                crash_history.push([parseFloat(crashHistory_str[i]), parseFloat(crashHistory_str[i+1])])
            }
            
            latlngs.forEach(element => {
                routeCoordinates.push([element.lat, element.lng])
            });

            outerloop:
            for (let crashPoint of crash_history){
                innerloop:
                for (let routePoint of routeCoordinates){
                    if((crashPoint[0] <= (routePoint[0]+ window)) && (crashPoint[0] >= routePoint[0]- window)){
                        if((crashPoint[1] <= routePoint[1]+ window) && (crashPoint[1] >= routePoint[1] - window)){
                            // outputCoordinates.indexOf(crashPoint) === -1 ? outputCoordinates.push(crashPoint) : console.log()
                            outputCoordinates.push(crashPoint);
                            break innerloop;
                        };  
                    };  
                };
            };
            console.log(outputCoordinates)
            return outputCoordinates
        }

        function initMap() {
            const directionsRenderer = new google.maps.DirectionsRenderer();
            const directionsService = new google.maps.DirectionsService();
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 10,
                center: { lat: 40.73, lng: -73.94 },
                disableDefaultUI: true,
            });

            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById("sidebar"));

            const control = document.getElementById("floating-panel");

            map.controls[google.maps.ControlPosition.TOP_CENTER].push(control);

            const onChangeHandler = function () {
                calculateAndDisplayRoute(directionsService, directionsRenderer);
            };

            document.getElementById("searchButton").addEventListener("click", onChangeHandler);
        }

        function calculateAndDisplayRoute(directionsService, directionsRenderer) {
            const mode = document.querySelector('input[name="mode"]:checked').value;
            const start = document.getElementById("origin").value;
            const end = document.getElementById("destination").value;
            
            var modeOption = google.maps.TravelMode.DRIVING;

            if (mode == "walking"){
                modeOption = google.maps.TravelMode.WALKING;
            } else if (mode == "bicycling") {
                modeOption = google.maps.TravelMode.BICYCLING;
            } else if (mode == "transit") {
                modeOption = google.maps.TravelMode.TRANSIT;
            }

            var latlngs; // an array of LatLngs that represent an approximate (smoothed) path of the resulting directions.
            var results;
            directionsService
                .route({
                    origin: start,
                    destination: end,
                    travelMode: modeOption,
                }, function(response, status){
                    if(status== "OK"){
                        latlngs = JSON.parse(JSON.stringify(response.routes[0]["overview_path"]));
                        
                        directionsRenderer.setDirections(response);
                        if (response.routes && response.routes.length > 0) {
                            latlngs = response.routes[0].overview_path;
                            results = getDangerFlagByPoint(latlngs);
                            console.log('results array=', results)
                        }
                        for (let res of results){
                            /*
                            var cood = res[0].toString() + ", " + res[1].toString();

                            var contentString =
                                '<div id="content">' +
                                '<div id="siteNotice">' +
                                "</div>" +
                                '<h1 id="firstHeading" class="firstHeading">' + cood + '</h1>' +
                                '<div id="bodyContent">' +
                                "</div>" +
                                "</div>";
    
                            var marker = new google.maps.Marker({  
                                map: map, 
                                position: { lat: res[0], lng: res[1] },
                                icon: new google.maps.MarkerImage('static/exclamation.svg',
                                                                    null, null, null, new google.maps.Size(20,22)),
                            });
                            */
                        }
                    }else{
                        if ((start == "") || (end == "")) {
                            alert("Please enter addresses.");
                        } else {
                            alert("Directions request failed");
                        }
                    }
                })
        }
        
        async function getDangerFlagByPoint(points){
            let results= [];
            // find nearest point in the crash database and get dangerousity score from that api
            for (let point of points){
                let lat = point.lat();
                    lng = point.lng();
                console.log('try')
                //await fetch(`https://vision-zero-api.herokuapp.com/positionScore/?latitude=${lat}&longtitude=${lng}`,{
                await fetch('https://vision-zero-api.herokuapp.com/positionScore/?latitude=-95.6356964&longitude=30.0945726',{
                    method: 'GET',
                    headers: {
                        'Access-Control-Allow-Origin':'*'
                    }
                }).then((response)=>{
                    console.log('res=',response)
                })

                /*
                fetch(`https://vision-zero-api.herokuapp.com/positionScore/?longtitude=${lng}&latitude=${lat}`)
                    .then((response) => {
                        alert(response.json())
                        if(response.status == "OK"){
                            results.append(response.json())
                        }
                    })
                */
            }
            return results;
        };

        function showIntersections(directionResult) {
            // For each step, place a marker, and add the text to the marker's
            // info window. Also attach the marker to an array so we
            // can keep track of it and remove it when calculating new
            // routes.
            var myRoute = directionResult.routes[0].legs[0];
          
            for (var i = 0; i < myRoute.steps.length; i++) {
                var marker = new google.maps.Marker({
                  position: myRoute.steps[i].start_point,
                  map: map
                });
                attachInstructionText(marker, myRoute.steps[i].instructions);
                markerArray[i] = marker;
            }
          }
          
          function attachInstructionText(marker, text) {
            google.maps.event.addListener(marker, 'click', function() {
              stepDisplay.setContent(text);
              stepDisplay.open(map, marker);
            });
          }

        window.initMap = initMap;
    </script>
    <script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyChvBupfwisVPAWC7pJOS-RlKAuWjrLymw&callback=initMap"
    >
        initMap()
    </script>
  </head>

  <body>

<div id="navigation-app"></div>
<div id="container">
    <div id="map"></div>
    
    <div class="card" id="search-card">
        <div id="travel-mode">
            <label class="radio">
                <input type="radio" value="walking" name="mode" checked>
                    Walking
            </label>
            <label class="radio">
                <input type="radio" value="bicycling" name="mode" >
                    Bicycling
            </label>
            <label class="radio">
                <input type="radio" value="transit" name="mode" >
                    Transit
            </label>
            <label class="radio">
                <input type="radio" value="driving" name="mode">
                    Driving
            </label>
        </div>
        
        <div id="user-input-area">
            <input id="origin" class="address-input"
                    required type="text" 
                    name="start-point"  
                    placeholder="Origin" 
                    type="text" />
            <div>
                <img src="../../../static/downward_arrow.png" id="downward-arrow"/>
            </div>
            
            <input id="destination"
                required type="text" 
                class="address-input"
                name="destination"  
                placeholder="Destination"
                    type="text"
                    />

            <button class="button is-medium is-success is-outlined"  id="searchButton">
                Go
            </button>
        </div>

        <p id="final-line">
            @ Vision Zero - Crash Data API
        </p>
    </div>
    <div>
       <a href="/"><button id="exit-demo"> Exit Demo</button></a>
    </div>
    
    </body>
    <!-- 
     The `defer` attribute causes the callback to execute after the full HTML
     document has been parsed. For non-blocking uses, avoiding race conditions,
     and consistent behavior across browsers, consider loading using Promises
     with https://www.npmjs.com/package/@googlemaps/js-api-loader.
    -->

  <%- include('../partials/footer') %>
</html>